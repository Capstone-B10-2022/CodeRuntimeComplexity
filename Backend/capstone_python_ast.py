# -*- coding: utf-8 -*-
"""Capstone_Python_AST.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w47ywM1h51xjm4sN6Tq8PlhDXDQuZsns

##Installing the required packages
"""

#!pip install anytree

#!pip install astpretty

import ast 
import re
import random
import anytree
from anytree import Node
#import astpretty #to print the ast in a more readable format

"""##Generating AST and visualizing it

"""

def get_ast(filename):
  with open(filename) as f:
    code = f.read()
  #print(code)
  text = re.sub('"""[\w\W]*?"""', '', code , flags=re.S)
  out = re.sub("'''[\w\W]*?'''", '', text, flags=re.S)
  #print(out)
  ast_py = ast.parse(out)
  return ast_py

def get_token(node):
  token = node.__class__.__name__
  if(isinstance(node,ast.arg)):
    token = node.arg
    return token
  if(isinstance(node,ast.Name)):
    token= node.id
    return token
  if(isinstance(node,ast.Num)):
    token = node.n
    return token
  if(isinstance(node,ast.FunctionDef)):
    token += ":"+str(node.name)
    return token
  #if(isinstance(node,ast.Call)):
   # token += ": "+ str(node.func)
   # return token
  if(isinstance(node,ast.Str)):
    token = node.s
    return token
  return token

"""##Custom function to extract the nodes from the ast

"""

def get_children(root):
    children = list(ast.iter_child_nodes(root))

    def expand(nested_list):
        for item in nested_list:
            if isinstance(item, list):
                for sub_item in expand(item):
                    yield sub_item
            elif item:
                yield item
    
    return list(expand(children))

def get_trees(current_node, parent_node, order,nodes):
    #print(current_node)
    #fields = list(ast.iter_fields(current_node))
    #print(fields)
    token, children = get_token(current_node), get_children(current_node)
    node = Node([order,token], parent=parent_node, order=order)
    #print(parent_node)
    #if(parent_node.name=='')
    p = str(parent_node.name[0])+"--"+str(parent_node.name[1])
    c = str(order)+"--"+str(token)
    nodes.append((p,c))
    #print(nodes)
    for child_order in range(len(children)):
        get_trees(children[child_order], node, order+str(random.randint(1,100000)+1),nodes)

from anytree import Node

def get_python_nodes(filename):
  ast_py=get_ast(filename)
  # Initialize head node of the code.
  head = Node(["1",ast_py.__class__.__name__])
  # Recursively construct AST tree.
  nodes = []
  #nodes.append((None,str(head.name[1])+str(head.name[0])))
  for child_order in range(len(get_children(ast_py))):
      get_trees(get_children(ast_py)[child_order], head, "1"+str(int(child_order)+1),nodes)

  return nodes,head

#removing newline and tab space characters

def rem_newline(item):
    item = item.replace('\n',"")
    item = item.replace('\t',"")
    return item

def write_nodes(target,nodes):
  with open(target, 'w') as fp:
      for item in nodes:
          # write each item on a new line
          #print(item[0],item[1])
          item0=rem_newline(item[0])
          item1=rem_newline(item[1])
          #print(item0,item1)
          fp.write(str(item0)+","+str(item1)+"\n")
      print('Done python nodes')

def python_nodes(filename, target):
  l = get_python_nodes(filename)
  nodes = l[0]
  tree=l[1]
  write_nodes(target,nodes)

#filename = 'hello.py'
#target = 'python_nodes.txt'
#python_nodes(filename,target)
